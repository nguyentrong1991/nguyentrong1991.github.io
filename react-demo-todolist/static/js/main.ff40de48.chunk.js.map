{"version":3,"sources":["TodoItem.js","todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","className","type","checked","this","props","item","completed","onChange","event","handleChange","id","style","fontStyle","color","textDecoration","text","Component","todosData","App","state","todos","bind","console","log","setState","prevState","map","todo","todoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAkBeA,E,iLAfH,IAAD,OAMP,OACE,yBAAKC,UAAU,aACb,2BAAOC,KAAK,WAAWC,QAASC,KAAKC,MAAMC,KAAKC,UAAWC,SAAU,SAACC,GAAD,OAAW,EAAKJ,MAAMK,aAAa,EAAKL,MAAMC,KAAKK,OACxH,uBAAGC,MAAOR,KAAKC,MAAMC,KAAKC,UARP,CACrBM,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAKwC,MAAOX,KAAKC,MAAMC,KAAKU,W,GAV9DC,aC0BRC,EA5BG,CACd,CACIP,GAAI,EACJK,KAAM,qBACNT,WAAW,GAEf,CACII,GAAI,EACJK,KAAM,mBACNT,WAAW,GAEf,CACII,GAAI,EACJK,KAAM,mBACNT,WAAW,GAEf,CACII,GAAI,EACJK,KAAM,WACNT,WAAW,GAEf,CACII,GAAI,EACJK,KAAM,mCACNT,WAAW,ICqBJY,G,kBAtCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAOH,GAET,EAAKR,aAAe,EAAKA,aAAaY,KAAlB,gBALR,E,0EAQDX,GACXY,QAAQC,IAAI,WAAYb,GACxBP,KAAKqB,UAAS,SAAAC,GAUZ,MAAO,CACLL,MAVmBK,EAAUL,MAAMM,KAAI,SAAAC,GACvC,OAAIA,EAAKjB,KAAOA,EACP,eACFiB,EADL,CAEErB,WAAYqB,EAAKrB,YAGdqB,W,+BAQH,IAAD,OACDC,EAAWzB,KAAKgB,MAAMC,MAAMM,KAAI,SAAArB,GAAI,OAAI,kBAAC,EAAD,CAAUwB,IAAKxB,EAAKK,GAAIL,KAAMA,EAAMI,aAAc,EAAKA,kBAErG,OACE,yBAAKT,UAAU,aACZ4B,O,GAjCSZ,cCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff40de48.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TodoItem extends Component {\n  render() {\n    const completedStyle = {\n      fontStyle: \"italic\",\n      color: \"#cdcdcd\",\n      textDecoration: \"line-through\"\n    }\n    return (\n      <div className=\"todo-item\">\n        <input type=\"checkbox\" checked={this.props.item.completed} onChange={(event) => this.props.handleChange(this.props.item.id)} />\n        <p style={this.props.item.completed ? completedStyle: null}>{this.props.item.text}</p>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;","const todosData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    }\n]\n\nexport default todosData","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport todosData from './todosData';\nimport './style.css';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(id) {\n    console.log(\"Changed!\", id)\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n  }\n\n  render() {\n    const todoItem = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange} />);\n\n    return (\n      <div className=\"todo-list\">\n        {todoItem}\n      </div>\n    );\n      \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}